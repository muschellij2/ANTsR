# use containers

# use c as catch-all language
language: r
sudo: required
cache: packages
use_bioc: yes
bioc_required: yes
r_check_args: --no-build-vignettes --as-cran
r_build_args: --no-build-vignettes --no-manual
upgrade_deps: false


r_binary_packages: 
  - gWidgetstcltk

os:
  - linux
  # - osx


compiler:
  - clang

matrix:
   allow_failures:
    - os: osx

# only run for pushes to master branch
# branches:
#  only:
#   - master

apt_packages:
  - pandoc
  - tcl8.5-dev
  - tk8.5-dev
  - git-core
  # h5 packages
  - libhdf5-7 
  - libhdf5-dev 
  - libhdf5-serial-dev

brew_packages:
  - pandoc
  - homebrew/science/hdf5  --enable-cxx

  # - sleep 3


# cache local R libraries directory:
# cache:
#   directories:
#     - ~/Rlib

# before_install:
#   - basedir=${PWD}
#   - cd ..
#   - if [ "$TRAVIS_OS_NAME" == "linux" ]; then cmake --version;  export PATH=$HOME/bin/:$PATH; fi
#   - if [ "$TRAVIS_OS_NAME" == "osx" ];  then cmake --version; fi
#   - export PATH=$HOME/bin/:$PATH
#   - cd $basedir
#  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sed -i 's|-DVCL_CAN_STATIC_CONST_INIT_FLOAT=1|-DVCL_CAN_STATIC_CONST_INIT_FLOAT=0|g' src/Makevars; fi

# install the package and dependencies:
# - create directory for R libraries (if not already exists)
# - create .Renviron with location of R libraries
# - define R repository in .Rprofile
# - add .travis.yml to .Rbuildignore
# - install devtools if not already installed
# - install covr if not already installed
# - update all installed packages
# - install package with dependencies
before_install:
  - "export DISPLAY=:99.0"
  # - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sh -e /etc/init.d/xvfb start; fi
  - mkdir -p ~/.R
  - export CC=clang
  - export CXX=clang++
  - echo "CC=clang" >  ~/.R/Makevars
  - echo "CXX=clang++" >> ~/.R/Makevars
  - echo "CXX1X=clang++" >> ~/.R/Makevars
  - echo "CXX1XSTD=-std=c++11" >> ~/.R/Makevars
  - source ~/.R/Makevars
  # - Rscript -e 'de = "DESCRIPTION"; dcf = as.data.frame(read.dcf(de), stringsAsFactors = FALSE); cn = which(colnames(dcf) != "Remotes"); dcf = dcf[,cn, drop =FALSE]; write.dcf(x= dcf, file = de)'
  # removing Remotes
  # - mkdir -p ~/Rlib
  # - echo 'R_LIBS=~/Rlib' > .Renviron
  # - echo 'R_LIBS_USER="~/Rlib"' >>  $HOME/.Renviron
  # - echo 'options(repos = "http://cran.rstudio.com")' > .Rprofile
  # - echo '.travis.yml' > .Rbuildignore
#   - Rscript -e 'if(!"Rcpp" %in% rownames(installed.packages())) { install.packages("Rcpp", dependencies = TRUE) }'
#   - Rscript -e 'if(!"stringi" %in% rownames(installed.packages())) { install.packages("stringi", dependencies = TRUE) }'
#   - Rscript -e 'if(!"knitr" %in% rownames(installed.packages())) { install.packages("knitr", dependencies = TRUE) }'
#   - Rscript -e 'if(!"ggplot2" %in% rownames(installed.packages())) { install.packages("ggplot2", dependencies = TRUE) }'
#   - Rscript -e 'if(!"igraph" %in% rownames(installed.packages())) { install.packages("igraph", dependencies = TRUE) }'
#   - Rscript -e 'if(!"pracma" %in% rownames(installed.packages())) { install.packages("pracma", dependencies = TRUE) }'
#   - Rscript -e 'if(!"dplyr" %in% rownames(installed.packages())) { install.packages("dplyr", dependencies = TRUE) }'
#   - Rscript -e 'if(!"mFilter" %in% rownames(installed.packages())) { install.packages("mFilter", dependencies = TRUE) }'
#   - Rscript -e 'if(!"rmarkdown" %in% rownames(installed.packages())) { install.packages("rmarkdown", dependencies = TRUE) }'
#   - Rscript -e 'if(!"magrittr" %in% rownames(installed.packages())) { install.packages("magrittr", dependencies = TRUE) }'
#   - Rscript -e 'if(!"testthat" %in% rownames(installed.packages())) { install.packages("testthat", dependencies = TRUE) }'
#   - Rscript -e 'if(!"randomForest" %in% rownames(installed.packages())) { install.packages("randomForest", dependencies = TRUE) }'
#   - Rscript -e 'if(!"psych" %in% rownames(installed.packages())) { install.packages("psych", dependencies = TRUE) }'
#   - Rscript -e 'if(!"plyr" %in% rownames(installed.packages())) { install.packages("plyr", dependencies = TRUE) }'
#   - Rscript -e 'if(!"magic" %in% rownames(installed.packages())) { install.packages("magic", dependencies = TRUE) }'
# #  - Rscript -e 'if(!"devtools" %in% rownames(installed.packages())) { install.packages("devtools", dependencies = TRUE) }'
# #  - Rscript -e 'if(!"covr" %in% rownames(installed.packages())) { install.packages("covr", dependencies = TRUE) }'
  # - Rscript -e 'update.packages(ask = FALSE, instlib = "~/Rlib")'
#  - Rscript -e 'devtools::install_deps(pkg = ".", dependencies = TRUE)'
  # - cd ~/
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then wget --no-check-certificate https://cmake.org/files/v3.4/cmake-3.4.0-rc1-Linux-x86_64.sh; sh cmake-3.4.0-rc1-Linux-x86_64.sh --skip-license --prefix=${HOME}; export PATH=${HOME}/bin/:$PATH; fi
  - export PATH=${HOME}/bin/:$PATH  
  - itkrrel=0.0.1
  - cwd=`pwd`
  - cd ~/   
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then wget https://github.com/stnava/ITKR/releases/download/latest/ITKR_${itkrrel}_R_x86_64-pc-linux-gnu.tar.gz; R CMD INSTALL ITKR_${itkrrel}_R_x86_64-pc-linux-gnu.tar.gz; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then wget http://github.com/stnava/ITKR/releases/download/latest/ITKR_${itkrrel}.tgz; R CMD INSTALL ITKR_${itkrrel}.tgz; fi
  - cd $cwd
  - Rscript -e 'if (!requireNamespace("devtools", quietly = TRUE)) install.packages("devtools")'  
  - Rscript -e 'devtools::source_url("https://gist.githubusercontent.com/muschellij2/69c48f469ab34cc05752361645ffa8e0/raw/57e7d3b22907699d260f863a0d337a12567ffc30/rewrite_dcf.R"); rewrite_dcf(drop_remotes = c("ITKR"));'
  # h5 config
  # - sudo apt-get install subversion autoconf build-essential libtool
  # - cd ..
  # - svn checkout http://svn.hdfgroup.uiuc.edu/hdf5/trunk hdf5-src
  # - cd hdf5-src
  # - ./autogen.sh
  # - autoconf
  # - ./configure --prefix=/usr/local --enable-cxx --enable-build-mode=production
  # - sudo make install
  # - cd ../h5  
  # - cd ${basedir}

# Build and check package
# script:
#   - source ~/.R/Makevars
#   - export CXX=clang++
#   - export CC=clang
#   - cd ..
#   - travis_wait 100 R CMD build ANTsR --no-build-vignettes --no-manual
#   - PKG_FILE_NAME=$(ls -1t *.tar.gz | head -n 1)
#   - if [[ ${#TRAVIS_TAG} -eq 0 ]]; then travis_wait 100 R CMD check "${PKG_FILE_NAME}" --no-manual; fi # --as-cran
#   - mydir=${PWD}
#   - if [[ ${#TRAVIS_TAG} -gt 0 ]]; then travis_wait 100  R CMD INSTALL --build ANTsR; PKG_FILE_NAME=$(ls -1t *.tar.gz | head -n 1); if [ "$TRAVIS_OS_NAME" == "osx" ];  then  PKG_FILE_NAME=$(ls -1t *.tgz | head -n  1);  fi; fi


# # report coverage rate to coveralls
# after_success:
#   - cd $mydir
# #  - Rscript -e 'covr::coveralls(exclusions = "src/RcppExports.cpp")'

# after_failure:
#   - cat ~/build/stnava/ANTsR.Rcheck/00install.out
#   - cat ~/build/stnava/ANTsR.Rcheck/00check.log
# #  - ./travis-tool.sh dump_logs
# #  - cat /home/travis/build/stnava/ANTsR.Rcheck/00install.out
# #  - cat /home/travis/build/stnava/ANTsR.Rcheck/00check.log  LINUX
# #  - cat /Users/travis/build/stnava/ANTsR.Rcheck/00install.out
# #  - cat /Users/travis/build/stnava/ANTsR.Rcheck/00check.log OSX

# send e-mails if stuff changes
notifications:
  email:
    recipients:
      - muschellij2@gmail.com
    # - stnava@gmail.com
    # - arman.eshaghi@gmail.com
    # - jeff.duda@gmail.com
    on_success: change
    on_failure: always

env:
  global:
#   - R_BUILD_ARGS=" "
#   - R_CHECK_ARGS=" --timings"
#   - R_CHECK_TIME="TRUE"
#   - R_CHECK_TESTS="TRUE"
#   - _R_CHECK_TIMINGS_="0"
  - _R_CHECK_FORCE_SUGGESTS_="0"
#   - BOOTSTRAP_LATEX=1
#   - WARNINGS_ARE_ERRORS=0

# deploy:
#   provider: releases
#   api_key:
#     secure: VevZHK5WDwd2mFSrF3+b2jTRzImb6juOgewcOvZ8LJ2S70khn64Kx4+JGUvk5miKWVbKnHIhPxOJY50muO9sT15ApP+HFZYpiVpx4l/hEypk9zmJD+f+ERuN7j8elCzUZqet3v77XD+pBcYMxFARew4gGDkG2LO5casij0YNiyQ=
#   file: ${PKG_FILE_NAME}
#   skip_cleanup: true
#   on:
#     tags: true
#     repo: stnava/ANTsR
